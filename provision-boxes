#!/bin/bash
set -u -e -E -C -o pipefail

SCRIPT=$(basename $0)
#FALLBACK_IMAGE_URL="https://dl.dropboxusercontent.com/s/phajfro2lb4h9qj/centos64-x86_64.box"
FALLBACK_IMAGE_URL="https://www.dropbox.com/s/44z2j6lllso31dl/sl6-ga.box"
NET_PREFIX_FILE=net-prefix
LOG_FILE=$(pwd)/logs/$SCRIPT.log
RES_DIR=$(pwd)/res
BOXES_DIR=$(pwd)/boxes
REPO_DIR=$(pwd)/repo
CACHE_DIR=$(pwd)/cache

MIN_VAGRANT_VERSION=1.2.2
MIN_VIRTUALBOX_VERSION=4.2

usage() {
    local EXIT_CODE=${1:-0}
    echo
    echo "usage: $SCRIPT"
    echo
    exit $EXIT_CODE
}

echo "-- checking installation"

if [[ $(id -u) == 0 ]]; then
    echo "root must not run this script directly"
    exit 1
fi

echo "---- vagrant"
VAGRANT_VERSION=$(vagrant --version | sed "s/[a-zA-Z ]//g" || :)
if [[ -z $VAGRANT_VERSION ]]; then
    echo "vagrant executable not found, at least $MIN_VAGRANT_VERSION needed."
    exit 1
fi
if [[ $VAGRANT_VERSION < $MIN_VAGRANT_VERSION ]]; then
    echo "vagrant version $VAGRANT_VERSION too old, at least $MIN_VAGRANT_VERSION needed."
    exit 1
fi

echo "---- VirtualBox"
VIRTUALBOX_VERSION=$(VBoxManage --version | sed "s/_.*//" || :)
if [[ -z $VIRTUALBOX_VERSION ]]; then
    echo "VirtualBox installation not found, at least $MIN_VIRTUALBOX_VERSION needed."
    exit 1
fi
if [[ $VIRTUALBOX_VERSION < $MIN_VIRTUALBOX_VERSION ]]; then
    echo "VirtualBox version $VIRTUALBOX_VERSION too old, at least $MIN_VIRTUALBOX_VERSION needed."
    exit 1
fi

if [[ ! -e $NET_PREFIX_FILE ]]; then
    echo
    echo "net prefix not defined; for example use"
    echo
    echo "    echo 192.168.33 > $NET_PREFIX_FILE"
    echo
    exit 1
fi
NET_PREFIX=$(cat $NET_PREFIX_FILE)

mkdir -p tmp $CACHE_DIR logs

echo
echo "-- checking vagrant image"
IMAGES=($(find cache -name "*.box"))
if [[ ${#IMAGES[@]} == 0 ]]; then
    echo "---- no images found in cache/, loading fallback image"
    IMAGE_FILENAME=$CACHE_DIR/$(basename $FALLBACK_IMAGE_URL)
    curl --retry 3 -s -o $IMAGE_FILENAME $FALLBACK_IMAGE_URL
else
    IMAGE_FILENAME=$PWD/${IMAGES[0]}
    echo "---- selecting $IMAGE_FILENAME"
fi

cat <<SUMMARY

-- creating boxes with the following settings:
            user: $USER
       box image: $IMAGE_FILENAME
      net prefix: $NET_PREFIX
        repo dir: $REPO_DIR

SUMMARY

IMAGE_FILENAME=$(readlink -e $IMAGE_FILENAME)

get_free_ip() {
    for i in $(seq 100 199); do
        test_ip=$NET_PREFIX.$i
        for used_ip in $(cat $BOXES_DIR/*/ip 2> /dev/null); do
            [[ $test_ip == $used_ip ]] && continue 2
        done
        echo $test_ip
        break
    done
}

echo "-- initializing boxes"
BOX_FOUND=
for BOXDIR in boxes/*; do
    BOX_FOUND=yes
    BOXNAME=$(basename $BOXDIR)
    echo "---- box $BOXNAME found"

    if [[ ! -e $BOXDIR/Vagrantfile ]]; then
        echo "------ initializing $BOXNAME"
        (
            cd $BOXDIR
            vagrant init box $IMAGE_FILENAME >> $LOG_FILE
            mv Vagrantfile Vagrantfile.orig

            if [[ ! -e role ]]; then
                ROLE=yadtclient
                echo "------ no role definition found, assuming '$ROLE'"
                echo $ROLE > role
            else
                ROLE=$(cat role)
                echo "------ configuring role '$ROLE'"
            fi

            IP=$(get_free_ip)
            echo "------ assigning ip $IP"
            rm -f ip && echo $IP > ip
            cat << VAGRANTFILE > Vagrantfile
Vagrant.configure("2") do |config|
  config.vm.box = "box"
  config.vm.box_url = "$IMAGE_FILENAME"
  config.vm.network :private_network, ip: "$IP"
  config.vm.hostname = "$BOXNAME"
  config.vm.synced_folder "$REPO_DIR", "/repo"
  config.vm.provision :shell, :path => "provision-box", :args => "$USER $ROLE"
  config.ssh.forward_agent = true
end
VAGRANTFILE
        )
    fi

    echo "------ adding public key and some base files"
    cp -r $RES_DIR/* $BOXDIR/
done

if [[ -z $BOX_FOUND ]]; then
    echo
    echo "no dirs found under boxes/"
    echo "consider running"
    echo
    echo "    mkdir boxes/myfirstbox"
    echo
    echo "then rerun $SCRIPT"
    exit 0
fi

echo
echo "-- configuring hostname resolution"
TMP_HOSTS=tmp/hosts
rm -f $TMP_HOSTS

echo "---- adding boxes to each other's hosts file"
for BOXDIR in boxes/*; do
    [[ -d $BOXDIR ]] || continue
    IP=$(cat $BOXDIR/ip)
    BOXNAME=$(basename $BOXDIR)
    echo "------ adding mapping $BOXNAME - $IP"
    echo "$IP    $BOXNAME" >> $TMP_HOSTS
done

for BOXDIR in boxes/*; do
    echo "------ distributing hosts to $BOXDIR"
    cp $TMP_HOSTS $BOXDIR
done


if [[ -e $HOME/.ssh/known_hosts ]]; then
    echo
    echo "-- clearing local known_hosts"
    for BOXDIR in boxes/*; do
        BOX_NAME=`basename $BOXDIR`
        IP=$(cat $BOXDIR/ip)
        echo "---- removing known_hosts entries for $BOX_NAME and $IP"
        ssh-keygen -q -f $HOME/.ssh/known_hosts -R $BOX_NAME 2> /dev/null
        ssh-keygen -q -f $HOME/.ssh/known_hosts -R $IP 2> /dev/null
    done
fi

echo
echo "-- starting boxes"
for BOXDIR in boxes/*; do
    [[ -d $BOXDIR ]] || continue
    IP=$(cat $BOXDIR/ip)
    BOXNAME=$(basename $BOXDIR)
    echo "---- starting $BOXNAME (this may take a few minutes)"
    (
        cd $BOXDIR
        vagrant up
    )
done



echo
echo "-- configuring yadt"
TARGET_FILE=cache/target
echo "---- generating target file"
rm -f $TARGET_FILE && echo "hosts:" > $TARGET_FILE
for BOXDIR in boxes/*; do
    ROLE=$(cat $BOXDIR/role)
    if [[ $ROLE != "yadtshell" ]]; then
        BOX_NAME=`basename $BOXDIR`
        echo "------ adding $BOX_NAME to $TARGET_FILE"
        echo "- $BOX_NAME">> $TARGET_FILE
    fi
done
echo "---- distributing $TARGET_FILE"
for BOXDIR in boxes/*; do
    ROLE=$(cat $BOXDIR/role)
    if [[ $ROLE == "yadtshell" ]]; then
        echo "------ adding target file to $BOXDIR"
        cp $TARGET_FILE $BOXDIR
    fi
done



echo
echo "-- checking user environment"
echo "---- checking ssh identity"
if ! ssh-add -L | grep vagrant > /dev/null; then
    echo "------ WARNING: ssh agent does not know the vagrant identity."
    echo "------          Consider calling 'ssh-add vagrant', otherwise"
    echo "------          the passwordless ssh-access will not work most probably."
fi

echo
echo "-- done."
